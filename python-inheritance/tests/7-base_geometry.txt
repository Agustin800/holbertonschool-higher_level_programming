>>> BaseGeometry = __import__('base_geometry_7_2').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0
>>> try:
...     bg.integer_validator("empty", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] empty must be an integer
>>> try:
...     bg.integer_validator("float_num", 5.5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] float_num must be an integer
>>> try:
...     bg.integer_validator("list_val", [1, 2, 3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] list_val must be an integer
>>> try:
...     bg.integer_validator("zero", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] zero must be greater than 0
>>> bg.integer_validator("one", 1)
>>> bg.integer_validator("large", 999999)
